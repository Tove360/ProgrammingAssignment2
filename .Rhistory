?list
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(c(1,2,3,4,5))
makeVector(c(1,2,3,4,5))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1,2,3,4,5))
vec <- c(1:5)
vec
makeVector(vec)
cachemean(vec)
cachemean(makeVector(vec))
cachemean(makeVector(vec))
?inv
?matrix
x <- c(1:5)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
x <- list(set = set, get = get,
setmean = setmean,
getmean = getmean)
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data)
x$setmean(m)
m
data
x$get
mat <- matrix(c(1:4), nrow=2, ncol=2)
mat
solve(mat)
mat*solve(mat)
solve(mat)*mat
cachemean(makeVector(vec))
m <- 3
cachemean(makeVector(vec))
makeCacheMatrix <- function(x = matrix()) {
mat <<- x
sol <<- solve(x)
}
makeCacheMatrix <- function(x = matrix()) {
mat <<- x
sol <<- solve(x)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if(!is.null(sol)){
message("getting cached data")
return(sol)
}
else solve(x)
}
mat <- matrix(c(1:4), nrow=2, ncol=2)
cacheSolve(makeCacheMatrix(mat))
makeCacheMatrix <- function(x = matrix()) {
mat <<- x
sol <<- solve(x)
list(mat=mat, sol=sol)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if(!is.null(x$sol)){
message("getting cached data")
return(sol)
}
else solve(x)
}
mat <- matrix(c(1:4), nrow=2, ncol=2)
cacheSolve(makeCacheMatrix(mat))
makeCacheMatrix <- function(x = matrix()) {
mat <<- x
sol <<- solve(x)
list(mat=mat, sol=sol)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
x$sol <- null
if(!is.null(x$sol)){
message("getting cached data")
return(sol)
}
else solve(x)
}
mat <- matrix(c(1:4), nrow=2, ncol=2)
cacheSolve(makeCacheMatrix(mat))
makeCacheMatrix <- function(x = matrix()) {
mat <<- x
sol <<- solve(x)
list(mat=mat, sol=sol)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
x$sol <- NULL
if(!is.null(x$sol)){
message("getting cached data")
return(sol)
}
else solve(x)
}
mat <- matrix(c(1:4), nrow=2, ncol=2)
cacheSolve(makeCacheMatrix(mat))
makeCacheMatrix <- function(x = matrix()) {
mat <<- x
sol <<- solve(x)
list(mat=mat, sol=sol)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
x$sol <- NULL
if(!is.null(x$sol)){
message("getting cached data")
return(sol)
}
else solve(x$mat)
}
mat <- matrix(c(1:4), nrow=2, ncol=2)
cacheSolve(makeCacheMatrix(mat))
